---
openapi: 3.0.0
info:
  title: OpenAPI Car API
  description: Sample OpenAPI API using cars
  contact:
    name: Laurent Broudoux
    url: https://github.com/lbroudoux
    email: laurent.broudoux@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
paths:
  /owner/{owner}/car:
    get:
      summary: List all cats of owner
      description: List all cars of owner description
      operationId: getCarsOp
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
              examples:
                laurent_cars:
                  value: |-
                    [
                        {"name": "307", "model": "Peugeot 307", "year": 2003},
                        {"name": "jean-pierre", "model": "Peugeot Traveler", "year": 2017}
                    ]
    post:
      summary: Add a car to current owner
      description: Add a car to current owner description
      operationId: addCarOp
      requestBody:
        description: Car body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
            examples:
              laurent_307:
                summary: Creation of a valid car
                description: Should return 201
                value: '{"name": "307", "model": "Peugeot 307", "year": 2003}'
        required: true
      responses:
        201:
          description: Car created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
              examples:
                laurent_307:
                  summary: Creation of a valid car response
                  value: '{"name": "307", "model": "Peugeot 307", "year": 2003}'
        400: {}
    parameters:
    - name: owner
      in: path
      description: Owner of the cars
      required: true
      schema:
        format: string
        type: string
      examples:
        laurent:
          summary: Value for laurent related examples
          value: laurent
  /owner/{owner}/car/{car}/passenger:
    post:
      summary: Add some passengers to the car
      description: Add some passengers to the car description
      operationId: addPassengerOp
      responses:
        200:
          content:
            application/json: {}
    parameters:
    - name: owner
      in: path
      description: Owner of the car
      required: true
      schema:
        type: string
    - name: car
      in: path
      description: The car to manage passengers for
      required: true
      schema:
        type: string
components:
  schemas:
    Car:
      required:
      - name
      properties:
        name:
          description: Name of the car
          type: string
        year:
          description: Build year
          type: integer
        model:
          description: Model of the car
          type: string
tags:
- name: car
  description:
